import { BehaviorSubject, Subscription } from 'rxjs';
import type { ITag, ITagData, VDOM, MountObserver, MountEvent, ChangeEvent, TreeUpdateEvent, InitiatorFunction, HistoryConfig } from './types';
import type { Unpacked } from '@/utils/packer';
export declare class Tag<DataType extends ITagData> implements ITag {
    private readonly initiator;
    private mounted;
    private subscriptions;
    protected eventObserver: MountObserver<DataType>;
    readonly data: BehaviorSubject<DataType>;
    readonly id: string;
    readonly name: string;
    readonly parent: ITag | null;
    readonly childKeys: BehaviorSubject<string[]>;
    readonly history: HistoryConfig;
    userData: {};
    constructor(props: Omit<VDOM, 'children'>, initiator?: InitiatorFunction<ITag>);
    protected __initialize(): void;
    get historyBatch(): boolean;
    set historyBatch(value: boolean);
    get path(): string[] | null;
    get isMounted(): boolean;
    protected set isMounted(mounted: boolean);
    get attrs(): DataType['attrs'];
    get children(): DataType['children'];
    get rx(): BehaviorSubject<DataType>;
    get events(): MountObserver<DataType>;
    findByPath(path: string[]): ITag | null;
    findById(id: string, recursive?: boolean): ITag | null;
    findByName(name: string, recursive?: boolean): ITag | null;
    find(fn: (child: ITag) => boolean, recursive?: boolean): ITag | null;
    getRoot(): ITag | null;
    get subscriptionsSize(): number;
    addSubscription(sub: Subscription): void;
    onUnmount(fn: (event: MountEvent) => void): Subscription;
    onChange(fn: (event: ChangeEvent<DataType>) => void): Subscription;
    onTreeUpdate(fn: (event: TreeUpdateEvent) => void): Subscription;
    setAttr<Key extends keyof DataType['attrs']>(name: Key, value: DataType['attrs'][Key]): void;
    setAttrs(attrs: DataType['attrs']): void;
    addChild(...childList: DataType['children']): void;
    removeChild(child: Unpacked<DataType['children']> | DataType['children']): boolean;
    filterChild(fn: (child: Unpacked<DataType['children']>) => boolean): void;
    remove(): boolean;
    traverse(fn: (Tag: ITag) => void): void;
    get vdom(): VDOM;
    toJSON(): VDOM;
}
